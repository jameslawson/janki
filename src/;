import xs from 'xstream';
import { List, Record } from 'immutable';
import { run } from '@cycle/run';
import { makeDOMDriver, h1, div, button } from '@cycle/dom';
import pack from '../resources/pack.json';
import makePreventDefaultDriver from './driver/preventDefault';
import cardView from './view/card';
import map from 'lodash/fp/map';
import flatten from 'lodash.flatten';
import compose from 'lodash.compose';
import { random } from 'array-permutation';
const mapWithIndex = map.convert({ cap: false });

const State = Record({ foo: 1, card: null });

function main({ DOM }) {
  const choiceClick$ = DOM.select('.choice').events('click');
  const loadQuestion$ = DOM.select('.start').events('click');
  const loadQuestionReducer$ = loadQuestion$.map(_ => state => {
    const nextCard = pack.cards[0];
    console.log('nextcard = ', nextCard);
    const choices = compose(
      random,
      mapWithIndex(retainIndexBeforeRandom),
      flatten
    )([nextCard.incorrect, nextCard.correct])
    console.log('choices = ', choices);
    return state.set('card', choices);
  });

  const choiceToggle$ = choiceClick$.map(e => e.currentTarget.attributes['data-index'].value);
  const choiceToggleReducer$ = choiceToggle$.map(action => state => state.update('foo', f => f + 1));

  const reducers$ = xs.merge(loadQuestionReducer$, choiceToggleReducer$);
  const state$ = xs.of(new State()).map(state => reducers$.fold((acc, reducer) => reducer(acc), state)).flatten();

  return {
    DOM: state$.map(state =>
      div('.janki', [
        h1('janki'),
        button('.start', 'start'),
        div(state.get('foo')),
        state.get('card') && cardView(state.get('card'))
      ]))
  };
}

run(main, {
  DOM: makeDOMDriver('#app'),
});
